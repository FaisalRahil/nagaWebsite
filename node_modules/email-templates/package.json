{
  "name": "email-templates",
  "description": "Node.js module for rendering beautiful emails with ejs, jade, swig, hbs, or handlebars templates and email-friendly inline CSS using juice.",
  "version": "1.1.2",
  "author": {
    "name": "Nick Baugh",
    "email": "niftylettuce@gmail.com"
  },
  "contributors": [
    {
      "name": "Nick Baugh",
      "email": "niftylettuce@gmail.com"
    },
    {
      "name": "Andrea Baccega",
      "email": "vekexasia@gmail.com"
    },
    {
      "name": "Nic Jansma",
      "url": "http://nicj.net"
    },
    {
      "name": "Jason Sims",
      "email": "sims.jrobert@gmail.com"
    },
    {
      "name": "Miguel Mota",
      "email": "hello@miguelmota.com"
    },
    {
      "name": "Jeduan Cornejo",
      "email": "jeduan@gmail.com"
    }
  ],
  "keywords": [
    "node-email-templates",
    "windows",
    "ejs",
    "email",
    "templates",
    "email-templates",
    "juice",
    "inline",
    "css"
  ],
  "homepage": "https://github.com/niftylettuce/node-email-templates",
  "repository": {
    "type": "git",
    "url": "https://github.com/niftylettuce/node-email-templates.git"
  },
  "engines": {
    "node": "0.10.x"
  },
  "main": "lib/main.js",
  "scripts": {
    "prepublish": "npm prune",
    "test": "mocha --reporter spec --bail --require test/support/should test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --require test/support/should test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec  --require test/support/should test/"
  },
  "dependencies": {
    "juice2": "^0.6.0",
    "consolidate": "^0.10.0",
    "async": "^0.9.0",
    "underscore": "^1.6.0",
    "glob": "^4.0.0"
  },
  "devDependencies": {
    "nodemailer": "^0.3.44",
    "postmark": "^0.1.8",
    "mocha": "^1.19.0",
    "chai": "^1.9.1",
    "mkdirp": "^0.3.5",
    "rimraf": "^2.2.8",
    "ejs": "^1.0.0",
    "swig": "^1.3.2",
    "jade": "^1.3.1",
    "handlebars": "^1.3.0",
    "emblem": "~0.3.16",
    "dustjs-linkedin": "^2.4.0",
    "less": "^1.7.0",
    "stylus": "^0.45.1",
    "styl": "^0.2.7",
    "node-sass": "^0.9.3",
    "sinon": "^1.10.2",
    "sinon-chai": "^2.5.0",
    "istanbul": "^0.3.2"
  },
  "bugs": {
    "url": "https://github.com/niftylettuce/node-email-templates/issues/new"
  },
  "readme": "\n# Node Email Templates\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![NPM downloads][npm-downloads]][npm-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![MIT License][license-image]][license-url]\n[![Gitter][gitter-image]][gitter-url]\n\nNode.js NPM package for rendering beautiful emails with your template engine and CSS pre-processor of choice coupled with email-friendly inline CSS using [juice][juice].\n\n> Enjoy this package?  Check out [eskimo][eskimo] and [express-cdn][express-cdn], and follow [@niftylettuce](http://twitter.com/niftylettuce)!\n\n\n## Index\n\n* [Email Templates](#email-templates)\n* [Installation](#installation)\n* [Quick Start](#quick-start)\n* [EJS Custom Tags](#ejs-custom-tags)\n* [Examples](#examples)\n    * [Basic](#basic)\n    * [Nodemailer](#nodemailer)\n    * [Postmark](#postmark)\n* [Lazyweb Requests](#lazyweb-requests)\n* [Changelog](#changelog)\n* [Contributors](#contributors)\n* [License](#license)\n\n\n## Email Templates\n\nFor customizable, pre-built email templates, see [Email Blueprints][email-blueprints] and [Transactional Email Templates][transactional-email-templates].\n\n#### Supported Template Engines\n\n* [ejs][ejs]\n* [jade][jade]\n* [swig][swig]\n* [handlebars][handlebars]\n* [emblem][emblem]\n* [dust-linkedin][dust-linkedin]\n\n#### Supported CSS Pre-processors\n\n* [less][less]\n* [sass][sass]\n* [stylus][stylus]\n* [styl][styl]\n\n\n## Prerequisites\n\nThis module depends on [jsdom](https://github.com/tmpvar/jsdom) which requires the ability to compile C++ on your localhost. Before installing, please verify that you have the prerequisites installed for your OS.\n\n* [OSX requirements](https://github.com/tmpvar/jsdom#mac)\n* [Linux requirements](https://github.com/tmpvar/jsdom#linux)\n\n#### Important Note for Windows Users\n\nDeveloping on OS X or Ubuntu/Linux is recommended, but if you only have access to a Windows machine you can do one of the following:\n\n* Use [vagrant](http://www.vagrantup.com/) to create a linux dev environment (recommended)\n* Follow the [Windows installation guide](https://github.com/brianmcd/contextify/wiki/Windows-Installation-Guide) for contextify\n\n\n## Installation\n\n```bash\nnpm install -S email-templates\n```\n\n> Starting with version `1.1.1` you must install the engines you wish to use by adding them to your `package.json` dependencies.\n\n```bash\nnpm install -S [ejs|jade|swig|handlebars|emblem|dust-linkedin]\n```\n\n\n## Quick Start\n\n1. Install the module for your respective project:\n\n    ```bash\n    npm install -S email-templates\n    ```\n\n2. Install the template engine you intend to use:\n    - `ejs`\n    - `jade`\n    - `swig`\n    - `handlebars`\n    - `emblem `\n    - `dust-linkedin`\n\n    ```bash\n    npm install -S <engine>\n    ```\n\n3. Create a folder called `templates` inside your root directory (or elsewhere).\n\n    ```bash\n    mkdir templates\n    ```\n\n4. For each of your email templates (e.g. a welcome email to send to users when they register on your site), respectively name and create a folder inside the `templates` folder.\n\n    ```bash\n    mkdir templates/welcome-email\n    ```\n\n5. Add the following files inside the template's folder:\n    * `html.{{ext}}` (**required**)\n    * `text.{{ext}}` (**optional**)\n    * `style.{{ext}}`(**optional**)\n\n    > **See [supported template engines](#supported-template-engines) for possible template engine extensions (e.g. `.ejs`, `.jade`, `.swig`) to use for the value of `{{ext}}` above.**\n\n    > You may prefix any file name with anything you like to help you identify the files more easily in your IDE.  The only requirement is that the filename contains `html.`, `text.`, and `style.` respectively.\n\n6. You may use the `include` directive from [ejs][ejs] (for example, to include a common header or footer).  See the `/examples` folder for details.\n\n7. Utilize one of the examples below for your respective email module and start sending beautiful emails!\n\n\n## Template Engine Options\n\nIf your want to configure your template engine, just pass options.\n\nWant to use different opening and closing tags instead of the EJS's default `<%` and `%>`?.\n\n```js\n// ...\nemailTemplates(templatesDir, { open: '{{', close: '}}' }, function(err, template) {\n// ...\n```\n\n> You can also pass <a href=\"https://github.com/visionmedia/ejs#options\" target=\"_blank\">other options from EJS's documentation</a>.\n\nWant to add a helper or partial to Handlebars?\n\n```js\n// ...\nemailTemplates(templatesDir, {\n  helpers: {\n    uppercase: function(context) {\n      return context.toUpperCase()\n    }\n  }, partials: {\n    // ...\n  }\n})\n// ...\n```\n\n\n## Examples\n\n### Basic\n\nRender a template for a single email or render multiple (having only loaded the template once).\n\n```js\nvar path           = require('path')\n  , templatesDir   = path.join(__dirname, 'templates')\n  , emailTemplates = require('email-templates');\n\nemailTemplates(templatesDir, function(err, template) {\n\n  // Render a single email with one template\n  var locals = { pasta: 'Spaghetti' };\n\n  template('pasta-dinner', locals, function(err, html, text) {\n    // ...\n  });\n\n  // Render multiple emails with one template\n  var locals = [\n    { pasta: 'Spaghetti' },\n    { pasta: 'Rigatoni' }\n  ];\n\n  var Render = function(locals) {\n    this.locals = locals;\n    this.send = function(err, html, text) {\n      // ...\n    };\n    this.batch = function(batch) {\n      batch(this.locals, this.send);\n    };\n  };\n\n  // An example users object\n  var users = [\n    {\n      email: 'pappa.pizza@spaghetti.com',\n      name: {\n        first: 'Pappa',\n        last: 'Pizza'\n      }\n    },\n    {\n      email: 'mister.geppetto@spaghetti.com',\n      name: {\n        first: 'Mister',\n        last: 'Geppetto'\n      }\n    }\n  ];\n\n  template('pasta-dinner', true, function(err, batch) {\n    for(var user in users) {\n      var render = new Render(users[user]);\n      render.batch(batch);\n    }\n  });\n\n});\n```\n\n### [Nodemailer][nodemailer]\n\n```js\nvar path           = require('path')\n  , templatesDir   = path.resolve(__dirname, '..', 'templates')\n  , emailTemplates = require('email-templates')\n  , nodemailer     = require('nodemailer');\n\nemailTemplates(templatesDir, function(err, template) {\n\n  if (err) {\n    console.log(err);\n  } else {\n\n    // ## Send a single email\n\n    // Prepare nodemailer transport object\n    var transport = nodemailer.createTransport(\"SMTP\", {\n      service: \"Gmail\",\n      auth: {\n        user: \"some-user@gmail.com\",\n        pass: \"some-password\"\n      }\n    });\n\n    // An example users object with formatted email function\n    var locals = {\n      email: 'mamma.mia@spaghetti.com',\n      name: {\n        first: 'Mamma',\n        last: 'Mia'\n      }\n    };\n\n    // Send a single email\n    template('newsletter', locals, function(err, html, text) {\n      if (err) {\n        console.log(err);\n      } else {\n        transport.sendMail({\n          from: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n          to: locals.email,\n          subject: 'Mangia gli spaghetti con polpette!',\n          html: html,\n          // generateTextFromHTML: true,\n          text: text\n        }, function(err, responseStatus) {\n          if (err) {\n            console.log(err);\n          } else {\n            console.log(responseStatus.message);\n          }\n        });\n      }\n    });\n\n\n    // ## Send a batch of emails and only load the template once\n\n    // Prepare nodemailer transport object\n    var transportBatch = nodemailer.createTransport(\"SMTP\", {\n      service: \"Gmail\",\n      auth: {\n        user: \"some-user@gmail.com\",\n        pass: \"some-password\"\n      }\n    });\n\n    // An example users object\n    var users = [\n      {\n        email: 'pappa.pizza@spaghetti.com',\n        name: {\n          first: 'Pappa',\n          last: 'Pizza'\n        }\n      },\n      {\n        email: 'mister.geppetto@spaghetti.com',\n        name: {\n          first: 'Mister',\n          last: 'Geppetto'\n        }\n      }\n    ];\n\n    // Custom function for sending emails outside the loop\n    //\n    // NOTE:\n    //  We need to patch postmark.js module to support the API call\n    //  that will let us send a batch of up to 500 messages at once.\n    //  (e.g. <https://github.com/diy/trebuchet/blob/master/lib/index.js#L160>)\n    var Render = function(locals) {\n      this.locals = locals;\n      this.send = function(err, html, text) {\n        if (err) {\n          console.log(err);\n        } else {\n          transportBatch.sendMail({\n            from: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n            to: locals.email,\n            subject: 'Mangia gli spaghetti con polpette!',\n            html: html,\n            // generateTextFromHTML: true,\n            text: text\n          }, function(err, responseStatus) {\n            if (err) {\n              console.log(err);\n            } else {\n              console.log(responseStatus.message);\n            }\n          });\n        }\n      };\n      this.batch = function(batch) {\n        batch(this.locals, templatesDir, this.send);\n      };\n    };\n\n    // Load the template and send the emails\n    template('newsletter', true, function(err, batch) {\n      for(var user in users) {\n        var render = new Render(users[user]);\n        render.batch(batch);\n      }\n    });\n\n  }\n});\n```\n\n### [Postmark][postmark]\n\nThis example utilizes [Postmark.js][postmarkjs].\n\n> Did you know `nodemailer` can also be used to send SMTP email through Postmark? See [this section][nodemailer-smtp] of their Readme for more info.\n\nFor more message format options, see [this section][postmark-msg-format] of Postmark's developer documentation section.\n\n```js\nvar path           = require('path')\n  , templatesDir   = path.resolve(__dirname, '..', 'templates')\n  , emailTemplates = require('email-templates')\n  , postmark       = require('postmark')('your-api-key');\n\nemailTemplates(templatesDir, function(err, template) {\n\n  if (err) {\n    console.log(err);\n  } else {\n\n    // ## Send a single email\n\n    // An example users object with formatted email function\n    var locals = {\n      email: 'mamma.mia@spaghetti.com',\n      name: {\n        first: 'Mamma',\n        last: 'Mia'\n      }\n    };\n\n    // Send a single email\n    template('newsletter', locals, function(err, html, text) {\n      if (err) {\n        console.log(err);\n      } else {\n        postmark.send({\n          From: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n          To: locals.email,\n          Subject: 'Mangia gli spaghetti con polpette!',\n          HtmlBody: html,\n          TextBody: text\n        }, function(err, response) {\n          if (err) {\n            console.log(err.status);\n            console.log(err.message);\n          } else {\n            console.log(response);\n          }\n        });\n      }\n    });\n\n\n    // ## Send a batch of emails and only load the template once\n\n    // An example users object\n    var users = [\n      {\n        email: 'pappa.pizza@spaghetti.com',\n        name: {\n          first: 'Pappa',\n          last: 'Pizza'\n        }\n      },\n      {\n        email: 'mister.geppetto@spaghetti.com',\n        name: {\n          first: 'Mister',\n          last: 'Geppetto'\n        }\n      }\n    ];\n\n    // Custom function for sending emails outside the loop\n    //\n    // NOTE:\n    //  We need to patch postmark.js module to support the API call\n    //  that will let us send a batch of up to 500 messages at once.\n    //  (e.g. <https://github.com/diy/trebuchet/blob/master/lib/index.js#L160>)\n    var Render = function(locals) {\n      this.locals = locals;\n      this.send = function(err, html, text) {\n        if (err) {\n          console.log(err);\n        } else {\n          postmark.send({\n            From: 'Spicy Meatball <spicy.meatball@spaghetti.com>',\n            To: locals.email,\n            Subject: 'Mangia gli spaghetti con polpette!',\n            HtmlBody: html,\n            TextBody: text\n          }, function(err, response) {\n            if (err) {\n              console.log(err.status);\n              console.log(err.message);\n            } else {\n              console.log(response);\n            }\n          });\n        }\n      };\n      this.batch = function(batch) {\n        batch(this.locals, templatesDir, this.send);\n      };\n    };\n\n    // Load the template and send the emails\n    template('newsletter', true, function(err, batch) {\n      for(user in users) {\n        var render = new Render(users[user]);\n        render.batch(batch);\n      }\n    });\n\n  }\n});\n```\n\n\n## Conventions\n\nSee [nifty-conventions][nifty-conventions] for code guidelines, general project requirements, and git workflow.\n\n\n## Contributors\n\n* Nick Baugh <niftylettuce@gmail.com>\n* Andrea Baccega <vekexasia@gmail.com>\n* Nic Jansma <http://nicj.net>\n* Jason Sims <sims.jrobert@gmail.com>\n* Miguel Mota <hello@miguelmota.com>\n* Jeduan Cornejo <jeduan@gmail.com>\n\n> Full list of contributors can be found on the [GitHub Contributor Graph][gh-graph]\n\n\n## License\n\n[MIT][license-url]\n\n\n[ejs]: https://github.com/visionmedia/ejs\n[juice]: https://github.com/LearnBoost/juice\n[nodemailer]: https://github.com/andris9/Nodemailer\n[postmark]: http://postmarkapp.com/\n[postmarkjs]: https://github.com/voodootikigod/postmark.js\n[nodemailer-smtp]: https://github.com/andris9/Nodemailer#well-known-services-for-smtp\n[postmark-msg-format]: http://developer.postmarkapp.com/developer-build.html#message-format\n[jade]: https://github.com/visionmedia/jade\n[swig]: https://github.com/paularmstrong/swig\n[handlebars]: https://github.com/wycats/handlebars.js\n[emblem]: https://github.com/machty/emblem.js\n[dust-linkedin]: https://github.com/linkedin/dustjs\n[less]: http://lesscss.org/\n[sass]: http://sass-lang.com/\n[stylus]: http://learnboost.github.io/stylus/\n[styl]: https://github.com/visionmedia/styl\n[express-cdn]: https://github.com/niftylettuce/express-cdn\n[license-image]: http://img.shields.io/badge/license-MIT-blue.svg?style=flat\n[license-url]: LICENSE\n[gh-graph]: https://github.com/niftylettuce/node-email-templates/graphs/contributors\n[npm-image]: http://img.shields.io/npm/v/email-templates.svg?style=flat\n[npm-url]: https://npmjs.org/package/email-templates\n[npm-downloads]: http://img.shields.io/npm/dm/email-templates.svg?style=flat\n[travis-url]: http://travis-ci.org/niftylettuce/node-email-templates\n[travis-image]: http://img.shields.io/travis/niftylettuce/node-email-templates.svg?style=flat\n[coveralls-image]: https://img.shields.io/coveralls/niftylettuce/node-email-templates.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/niftylettuce/node-email-templates?branch=master\n[gitter-url]: https://gitter.im/niftylettuce/node-email-templates\n[gitter-image]: http://img.shields.io/badge/chat-online-brightgreen.svg?style=flat\n[eskimo]: http://eskimo.io\n[nifty-conventions]: https://github.com/niftylettuce/nifty-conventions\n[email-blueprints]: https://github.com/mailchimp/Email-Blueprints\n[transactional-email-templates]: https://github.com/mailgun/transactional-email-templates\n",
  "readmeFilename": "Readme.md",
  "_id": "email-templates@1.1.2",
  "_from": "email-templates@^1.1.2"
}
